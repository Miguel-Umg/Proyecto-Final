#include <iostream>
#include <mysql.h> // Se establecio la conexion de base de datos a visual studios
#include <string> 

using namespace std;

// Definir códigos de escape ANSI para colores
#define ANSI_COLOR_RED     "\x1b[31m"
#define ANSI_COLOR_YELLOW  "\x1b[33m"
#define ANSI_COLOR_RESET   "\x1b[0m"

class Directoriobasedatos {
private:
    MYSQL* Conector;

public:
    Directoriobasedatos(const string& host, const string& user, const string& password, const string& database, int port = 3306) {
        Conector = mysql_init(NULL);
        if (Conector == NULL) {
            cerr << "Error inicializacion de conecxion MYSQL" << endl;
            exit(1);
        }

        if (!mysql_real_connect(Conector, host.c_str(), user.c_str(), password.c_str(), database.c_str(), port, NULL, 0)) {
            cerr << "Error a la conexion a la base de datos MYSQL: " << mysql_error(Conector) << endl;
            exit(1);
        }
    }

    ~Directoriobasedatos() {
        mysql_close(Conector);
    }

    void createviajero(const string& nombre, const string& apellido, const string& email) {
        string query = "INSERT INTO Viajero (nombre, apellido, email) VALUES ('" + nombre + "', '" + apellido + "', '" + email + "')";
        executeQuery(query);
        refreshViajero();
    }

    void createDestino(const string& numero_vuelo, const string& origen, const string& destino, const string& fecha) {
        string query = "INSERT INTO Vuelos (numero_vuelo, origen, destino, fecha) VALUES ('" + numero_vuelo + "', '" + origen + "', '" + destino + "', '" + fecha + "')";
        executeQuery(query);
        refreshDestino();
    }

    void createVoleto(int pasajero_id, int vuelo_id, const string& fecha_reserva, const string& numero_asiento, const string& clase) {
        string query = "INSERT INTO Voleto (viajeros_id, Destino_id, fecha_reserva, numero_asiento, clase) VALUES (" + to_string(pasajero_id) + ", " + to_string(vuelo_id) + ", '" + fecha_reserva + "', '" + numero_asiento + "', '" + clase + "')";
        executeQuery(query);
        refreshVoleto();
    }

    void deleteViajero(int id) {
        string query = "DELETE FROM Viajero WHERE id = " + to_string(id);
        executeQuery(query);
        refreshViajero();
    }

    void deleteDestino(int id) {
        string query = "DELETE FROM Destino WHERE id = " + to_string(id);
        executeQuery(query);
        refreshDestino();
    }

    void deleteVoleto(int id) {
        string query = "DELETE FROM Voleto WHERE id = " + to_string(id);
        executeQuery(query);
        refreshVoleto();
    }

    void updateViajero(int id, const string& nombre, const string& apellido, const string& email) {
        string query = "UPDATE Viajero SET nombre = '" + nombre + "', apellido = '" + apellido + "', email = '" + email + "' WHERE id = " + to_string(id);
        executeQuery(query);
        refreshViajero();
    }

    void updateDestino(int id, const string& numero_vuelo, const string& origen, const string& destino, const string& fecha) {
        string query = "UPDATE Destino SET numero_vuelo = '" + numero_vuelo + "', origen = '" + origen + "', destino = '" + destino + "', fecha = '" + fecha + "' WHERE id = " + to_string(id);
        executeQuery(query);
        refreshDestino();
    }

    void updateVoleto(int id, const string& fecha_reserva, const string& numero_asiento, const string& clase) {
        string query = "UPDATE Voleto SET fecha_reserva = '" + fecha_reserva + "', numero_asiento = '" + numero_asiento + "', clase = '" + clase + "' WHERE id = " + to_string(id);
        executeQuery(query);
        refreshVoleto();
    }

    void viewViajero() {
        executeQuery("SELECT * FROM Viajero", true);
    }

    void viewDestino() {
        executeQuery("SELECT * FROM Destino", true);
    }

    void viewVoleto() {
        executeQuery("SELECT * FROM Voleto", true);
    }

    void executeQuery(const string& query, bool displayResult = false) {
        if (mysql_query(Conector, query.c_str())) {
            cerr << "Error ejecutar query: " << mysql_error(Conector) << endl;
        }
        else if (displayResult) {
            MYSQL_RES* res = mysql_store_result(Conector);
            if (res) {
                MYSQL_ROW row;
                while ((row = mysql_fetch_row(res))) {
                    for (unsigned int i = 0; i < mysql_num_fields(res); i++) {
                        cout << row[i] << " ";
                    }
                    cout << endl;
                }
                mysql_free_result(res);
            }
            else {
                cerr << "Error al guaradar el resultado: " << mysql_error(Conector) << endl;
            }
        }
    }

    void refreshViajero() {
        // No output
    }

    void refreshDestino() {
        // No output
    }

    void refreshVoleto() {
        // No output
    }
};

void printMenu() {
    // Imprimir el menú con colores
    cout << ANSI_COLOR_RED << "============================" << endl;
    cout << ANSI_COLOR_YELLOW << "          MENU              " << endl;
    cout << ANSI_COLOR_RED << "============================" << endl;
    cout << ANSI_COLOR_YELLOW << "1. Crear Viajero" << endl;
    cout << "2. Ver Viajero" << endl;
    cout << "3. Actualizar Viajero" << endl;
    cout << "4. Borrar Viajero" << endl;
    cout << "5. Crear Destino" << endl;
    cout << "6. Ver Destinos" << endl;
    cout << "7. Actualizar Destino" << endl;
    cout << "8. Borrar Vuelo" << endl;
    cout << "9. Crear Pasaje" << endl;
    cout << "10. Ver Pasajes" << endl;
    cout << "11. Actualizar Boleto" << endl;
    cout << "12. Eliminar Boleto" << endl;
    cout << "n. Salir" << endl;
    cout << ANSI_COLOR_RED << "============================" << endl;
    cout << ANSI_COLOR_RESET << "Escoge una opcion: ";
}

int main() {
    Directoriobasedatos dbManager("localhost", "root", "Umg$2024", "LaReservacion");

    char choice;
    do {
        printMenu();
        cin >> choice;

        switch (choice) {
        case '1': {
            string nombre, apellido, email;
            cout << "Ingresar primer nombre: ";
            cin >> nombre;
            cout << "Ingresar segundo nombre: ";
            cin >> apellido;
            cout << "Ingresar email: ";
            cin >> email;
            dbManager.createviajero(nombre, apellido, email);
            break;
        }
        case '2':
            dbManager.viewViajero();
            break;
        case '3': {
            int id;
            string nombre, apellido, email;
            cout << "Ingresa ID del Viajero para actualizar: ";
            cin >> id;
            cout << "Ingresa primer apellido: ";
            cin >> nombre;
            cout << "Ingresa segundo apellido: ";
            cin >> apellido;
            cout << "Ingresa nuevo email: ";
            cin >> email;
            dbManager.updateViajero(id, nombre, apellido, email);
            break;
        }
        case '4': {
            int id;
            cout << "Ingresa ID del Viajero para eliminar: ";
            cin >> id;
            dbManager.deleteViajero(id);
            break;
        }
        case '5': {
            string numero_vuelo, origen, destino, fecha;
            cout << "Ingresar numero de vuelo: ";
            cin >> numero_vuelo;
            cout << "Ingrese origin: ";
            cin >> origen;
            cout << "Ingresar destination: ";
            cin >> destino;
            cout << "Enter date (YYYY-MM-DD): ";
            cin >> fecha;
            dbManager.createDestino(numero_vuelo, origen, destino, fecha);
            break;
        }
        case '6':
            dbManager.viewDestino();
            break;
        case '7': {
            int id;
            string numero_vuelo, origen, destino, fecha;
            cout << "Ingresar ID del Destino para actualizar: ";
            cin >> id;
            cout << "Ingrese nuevo numero de vuelo: ";
            cin >> numero_vuelo;
            cout << "Ingresar nuevo origen: ";
            cin >> origen;
            cout << "Ingresar nueva destinacion: ";
            cin >> destino;
            cout << "Ingresar nueva fecha (YYYY-MM-DD): ";
            cin >> fecha;
            dbManager.updateDestino(id, numero_vuelo, origen, destino, fecha);
            break;
        }
        case '8': {
            int id;
            cout << "INGRESAR ID DEL Destino para eliminar: ";
            cin >> id;
            dbManager.deleteDestino(id);
            break;
        }
        case '9': {
            int Viajero_id, Destino_id;
            string fecha_reserva, numero_asiento, clase;
            cout << "Ingresar Viajero ID: ";
            cin >> Viajero_id;
            cout << "Ingresar Destino ID: ";
            cin >> Destino_id;
            cout << "Ingresar fecha (YYYY-MM-DD): ";
            cin >> fecha_reserva;
            cout << "Ingresar numero de asiento: ";
            cin >> numero_asiento;
            cout << "Ingresar clase: ";
            cin >> clase;
            dbManager.createVoleto(Viajero_id, Destino_id, fecha_reserva, numero_asiento, clase);
            break;
        }
        case '10':
            dbManager.viewVoleto();
            break;
        case '11': {
            int id;
            string fecha_reserva, numero_asiento, clase;
            cout << "Ingresa ID de voleto para actualizar: ";
            cin >> id;
            cout << "Ingresar nueva fecha de reserva (YYYY-MM-DD): ";
            cin >> fecha_reserva;
            cout << "Ingresa el nuevo numero de asiento: ";
            cin >> numero_asiento;
            cout << "Ingresar nueva clase: ";
            cin >> clase;
            dbManager.updateVoleto(id, fecha_reserva, numero_asiento, clase);
            break;
        }
        case '12': {
            int id;
            cout << "Ingresar ID del voleto a eliminar: ";
            cin >> id;
            dbManager.deleteVoleto(id);
            break;
        }
        case 'n':
        case 'N':
            cout << "¡Feliz Viaje!" << endl;
            break;
        default:
            cout << "Opcion invalida" << endl;
        }

        if (choice != 'n' && choice != 'N') {
            cout << "Desea continuar? (y/n): ";
            cin >> choice;
        }

    } while (choice == 'y' || choice == 'Y');

    cout << "¡Feliz Viaje!" << endl;

    return 0;
}
